//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsFormsApplication1.ServRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoomMirror", Namespace="http://schemas.datacontract.org/2004/07/Chess.Service")]
    [System.SerializableAttribute()]
    public partial class RoomMirror : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<string> PlayersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<string> WatchersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> Players {
            get {
                return this.PlayersField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayersField, value) != true)) {
                    this.PlayersField = value;
                    this.RaisePropertyChanged("Players");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> Watchers {
            get {
                return this.WatchersField;
            }
            set {
                if ((object.ReferenceEquals(this.WatchersField, value) != true)) {
                    this.WatchersField = value;
                    this.RaisePropertyChanged("Watchers");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerColor", Namespace="http://schemas.datacontract.org/2004/07/Chess.Service")]
    public enum PlayerColor : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        White = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Black = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageType", Namespace="http://schemas.datacontract.org/2004/07/Chess.Service")]
    public enum MessageType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlayerJoined = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlayerLeft = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WatcherJoined = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WatcherLeft = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServRef.IChessServiceCommuni", CallbackContract=typeof(WindowsFormsApplication1.ServRef.IChessServiceCommuniCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IChessServiceCommuni {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChessServiceCommuni/Connect", ReplyAction="http://tempuri.org/IChessServiceCommuni/ConnectResponse")]
        System.Collections.Generic.List<WindowsFormsApplication1.ServRef.RoomMirror> Connect(string name);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChessServiceCommuni/Connect", ReplyAction="http://tempuri.org/IChessServiceCommuni/ConnectResponse")]
        System.IAsyncResult BeginConnect(string name, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<WindowsFormsApplication1.ServRef.RoomMirror> EndConnect(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChessServiceCommuni/JoinRoom", ReplyAction="http://tempuri.org/IChessServiceCommuni/JoinRoomResponse")]
        WindowsFormsApplication1.ServRef.RoomMirror JoinRoom(int roomID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChessServiceCommuni/JoinRoom", ReplyAction="http://tempuri.org/IChessServiceCommuni/JoinRoomResponse")]
        System.IAsyncResult BeginJoinRoom(int roomID, System.AsyncCallback callback, object asyncState);
        
        WindowsFormsApplication1.ServRef.RoomMirror EndJoinRoom(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChessServiceCommuni/Send", ReplyAction="http://tempuri.org/IChessServiceCommuni/SendResponse")]
        void Send(string message);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChessServiceCommuni/Send", ReplyAction="http://tempuri.org/IChessServiceCommuni/SendResponse")]
        System.IAsyncResult BeginSend(string message, System.AsyncCallback callback, object asyncState);
        
        void EndSend(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChessServiceCommuni/Move", ReplyAction="http://tempuri.org/IChessServiceCommuni/MoveResponse")]
        void Move(int srcX, int srcY, int targX, int targY);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChessServiceCommuni/Move", ReplyAction="http://tempuri.org/IChessServiceCommuni/MoveResponse")]
        System.IAsyncResult BeginMove(int srcX, int srcY, int targX, int targY, System.AsyncCallback callback, object asyncState);
        
        void EndMove(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChessServiceCommuniCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChessServiceCommuni/ClientConnected", ReplyAction="http://tempuri.org/IChessServiceCommuni/ClientConnectedResponse")]
        void ClientConnected(string name);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChessServiceCommuni/ClientConnected", ReplyAction="http://tempuri.org/IChessServiceCommuni/ClientConnectedResponse")]
        System.IAsyncResult BeginClientConnected(string name, System.AsyncCallback callback, object asyncState);
        
        void EndClientConnected(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChessServiceCommuni/ClientDisconnected", ReplyAction="http://tempuri.org/IChessServiceCommuni/ClientDisconnectedResponse")]
        void ClientDisconnected(string name);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChessServiceCommuni/ClientDisconnected", ReplyAction="http://tempuri.org/IChessServiceCommuni/ClientDisconnectedResponse")]
        System.IAsyncResult BeginClientDisconnected(string name, System.AsyncCallback callback, object asyncState);
        
        void EndClientDisconnected(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChessServiceCommuni/Receive", ReplyAction="http://tempuri.org/IChessServiceCommuni/ReceiveResponse")]
        void Receive(string message);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChessServiceCommuni/Receive", ReplyAction="http://tempuri.org/IChessServiceCommuni/ReceiveResponse")]
        System.IAsyncResult BeginReceive(string message, System.AsyncCallback callback, object asyncState);
        
        void EndReceive(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChessServiceCommuni/R_StartGame", ReplyAction="http://tempuri.org/IChessServiceCommuni/R_StartGameResponse")]
        void R_StartGame(WindowsFormsApplication1.ServRef.PlayerColor color);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChessServiceCommuni/R_StartGame", ReplyAction="http://tempuri.org/IChessServiceCommuni/R_StartGameResponse")]
        System.IAsyncResult BeginR_StartGame(WindowsFormsApplication1.ServRef.PlayerColor color, System.AsyncCallback callback, object asyncState);
        
        void EndR_StartGame(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChessServiceCommuni/R_MoveCallback", ReplyAction="http://tempuri.org/IChessServiceCommuni/R_MoveCallbackResponse")]
        void R_MoveCallback(int srcX, int srcY, int targX, int targY);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChessServiceCommuni/R_MoveCallback", ReplyAction="http://tempuri.org/IChessServiceCommuni/R_MoveCallbackResponse")]
        System.IAsyncResult BeginR_MoveCallback(int srcX, int srcY, int targX, int targY, System.AsyncCallback callback, object asyncState);
        
        void EndR_MoveCallback(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChessServiceCommuni/R_ReceiveRoomMessage", ReplyAction="http://tempuri.org/IChessServiceCommuni/R_ReceiveRoomMessageResponse")]
        void R_ReceiveRoomMessage(WindowsFormsApplication1.ServRef.MessageType msgType, string userName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChessServiceCommuni/R_ReceiveRoomMessage", ReplyAction="http://tempuri.org/IChessServiceCommuni/R_ReceiveRoomMessageResponse")]
        System.IAsyncResult BeginR_ReceiveRoomMessage(WindowsFormsApplication1.ServRef.MessageType msgType, string userName, System.AsyncCallback callback, object asyncState);
        
        void EndR_ReceiveRoomMessage(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChessServiceCommuniChannel : WindowsFormsApplication1.ServRef.IChessServiceCommuni, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConnectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConnectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<WindowsFormsApplication1.ServRef.RoomMirror> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<WindowsFormsApplication1.ServRef.RoomMirror>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class JoinRoomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public JoinRoomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WindowsFormsApplication1.ServRef.RoomMirror Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WindowsFormsApplication1.ServRef.RoomMirror)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChessServiceCommuniClient : System.ServiceModel.DuplexClientBase<WindowsFormsApplication1.ServRef.IChessServiceCommuni>, WindowsFormsApplication1.ServRef.IChessServiceCommuni {
        
        private BeginOperationDelegate onBeginConnectDelegate;
        
        private EndOperationDelegate onEndConnectDelegate;
        
        private System.Threading.SendOrPostCallback onConnectCompletedDelegate;
        
        private BeginOperationDelegate onBeginJoinRoomDelegate;
        
        private EndOperationDelegate onEndJoinRoomDelegate;
        
        private System.Threading.SendOrPostCallback onJoinRoomCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendDelegate;
        
        private EndOperationDelegate onEndSendDelegate;
        
        private System.Threading.SendOrPostCallback onSendCompletedDelegate;
        
        private BeginOperationDelegate onBeginMoveDelegate;
        
        private EndOperationDelegate onEndMoveDelegate;
        
        private System.Threading.SendOrPostCallback onMoveCompletedDelegate;
        
        public ChessServiceCommuniClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChessServiceCommuniClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChessServiceCommuniClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChessServiceCommuniClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChessServiceCommuniClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public event System.EventHandler<ConnectCompletedEventArgs> ConnectCompleted;
        
        public event System.EventHandler<JoinRoomCompletedEventArgs> JoinRoomCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> MoveCompleted;
        
        public System.Collections.Generic.List<WindowsFormsApplication1.ServRef.RoomMirror> Connect(string name) {
            return base.Channel.Connect(name);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConnect(string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConnect(name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<WindowsFormsApplication1.ServRef.RoomMirror> EndConnect(System.IAsyncResult result) {
            return base.Channel.EndConnect(result);
        }
        
        private System.IAsyncResult OnBeginConnect(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            return this.BeginConnect(name, callback, asyncState);
        }
        
        private object[] OnEndConnect(System.IAsyncResult result) {
            System.Collections.Generic.List<WindowsFormsApplication1.ServRef.RoomMirror> retVal = this.EndConnect(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConnectCompleted(object state) {
            if ((this.ConnectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConnectCompleted(this, new ConnectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConnectAsync(string name) {
            this.ConnectAsync(name, null);
        }
        
        public void ConnectAsync(string name, object userState) {
            if ((this.onBeginConnectDelegate == null)) {
                this.onBeginConnectDelegate = new BeginOperationDelegate(this.OnBeginConnect);
            }
            if ((this.onEndConnectDelegate == null)) {
                this.onEndConnectDelegate = new EndOperationDelegate(this.OnEndConnect);
            }
            if ((this.onConnectCompletedDelegate == null)) {
                this.onConnectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConnectCompleted);
            }
            base.InvokeAsync(this.onBeginConnectDelegate, new object[] {
                        name}, this.onEndConnectDelegate, this.onConnectCompletedDelegate, userState);
        }
        
        public WindowsFormsApplication1.ServRef.RoomMirror JoinRoom(int roomID) {
            return base.Channel.JoinRoom(roomID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginJoinRoom(int roomID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginJoinRoom(roomID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public WindowsFormsApplication1.ServRef.RoomMirror EndJoinRoom(System.IAsyncResult result) {
            return base.Channel.EndJoinRoom(result);
        }
        
        private System.IAsyncResult OnBeginJoinRoom(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int roomID = ((int)(inValues[0]));
            return this.BeginJoinRoom(roomID, callback, asyncState);
        }
        
        private object[] OnEndJoinRoom(System.IAsyncResult result) {
            WindowsFormsApplication1.ServRef.RoomMirror retVal = this.EndJoinRoom(result);
            return new object[] {
                    retVal};
        }
        
        private void OnJoinRoomCompleted(object state) {
            if ((this.JoinRoomCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.JoinRoomCompleted(this, new JoinRoomCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void JoinRoomAsync(int roomID) {
            this.JoinRoomAsync(roomID, null);
        }
        
        public void JoinRoomAsync(int roomID, object userState) {
            if ((this.onBeginJoinRoomDelegate == null)) {
                this.onBeginJoinRoomDelegate = new BeginOperationDelegate(this.OnBeginJoinRoom);
            }
            if ((this.onEndJoinRoomDelegate == null)) {
                this.onEndJoinRoomDelegate = new EndOperationDelegate(this.OnEndJoinRoom);
            }
            if ((this.onJoinRoomCompletedDelegate == null)) {
                this.onJoinRoomCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnJoinRoomCompleted);
            }
            base.InvokeAsync(this.onBeginJoinRoomDelegate, new object[] {
                        roomID}, this.onEndJoinRoomDelegate, this.onJoinRoomCompletedDelegate, userState);
        }
        
        public void Send(string message) {
            base.Channel.Send(message);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSend(string message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSend(message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSend(System.IAsyncResult result) {
            base.Channel.EndSend(result);
        }
        
        private System.IAsyncResult OnBeginSend(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string message = ((string)(inValues[0]));
            return this.BeginSend(message, callback, asyncState);
        }
        
        private object[] OnEndSend(System.IAsyncResult result) {
            this.EndSend(result);
            return null;
        }
        
        private void OnSendCompleted(object state) {
            if ((this.SendCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendAsync(string message) {
            this.SendAsync(message, null);
        }
        
        public void SendAsync(string message, object userState) {
            if ((this.onBeginSendDelegate == null)) {
                this.onBeginSendDelegate = new BeginOperationDelegate(this.OnBeginSend);
            }
            if ((this.onEndSendDelegate == null)) {
                this.onEndSendDelegate = new EndOperationDelegate(this.OnEndSend);
            }
            if ((this.onSendCompletedDelegate == null)) {
                this.onSendCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendCompleted);
            }
            base.InvokeAsync(this.onBeginSendDelegate, new object[] {
                        message}, this.onEndSendDelegate, this.onSendCompletedDelegate, userState);
        }
        
        public void Move(int srcX, int srcY, int targX, int targY) {
            base.Channel.Move(srcX, srcY, targX, targY);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMove(int srcX, int srcY, int targX, int targY, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMove(srcX, srcY, targX, targY, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndMove(System.IAsyncResult result) {
            base.Channel.EndMove(result);
        }
        
        private System.IAsyncResult OnBeginMove(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int srcX = ((int)(inValues[0]));
            int srcY = ((int)(inValues[1]));
            int targX = ((int)(inValues[2]));
            int targY = ((int)(inValues[3]));
            return this.BeginMove(srcX, srcY, targX, targY, callback, asyncState);
        }
        
        private object[] OnEndMove(System.IAsyncResult result) {
            this.EndMove(result);
            return null;
        }
        
        private void OnMoveCompleted(object state) {
            if ((this.MoveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MoveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MoveAsync(int srcX, int srcY, int targX, int targY) {
            this.MoveAsync(srcX, srcY, targX, targY, null);
        }
        
        public void MoveAsync(int srcX, int srcY, int targX, int targY, object userState) {
            if ((this.onBeginMoveDelegate == null)) {
                this.onBeginMoveDelegate = new BeginOperationDelegate(this.OnBeginMove);
            }
            if ((this.onEndMoveDelegate == null)) {
                this.onEndMoveDelegate = new EndOperationDelegate(this.OnEndMove);
            }
            if ((this.onMoveCompletedDelegate == null)) {
                this.onMoveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMoveCompleted);
            }
            base.InvokeAsync(this.onBeginMoveDelegate, new object[] {
                        srcX,
                        srcY,
                        targX,
                        targY}, this.onEndMoveDelegate, this.onMoveCompletedDelegate, userState);
        }
    }
}
